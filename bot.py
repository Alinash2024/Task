import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, \
    CallbackQueryHandler, CommandHandler, ContextTypes, CallbackContext, ConversationHandler

from credentials import ChatGPT_TOKEN
from gpt import ChatGptService
from util import load_message, load_prompt, send_text_buttons, send_text, \
    send_image, show_main_menu, Dialog, default_callback_handler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'main'
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'translator': '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ üåê',
        'vocabulary': '–¢—Ä–µ–Ω–∞–∂–µ—Ä —Å–ª–æ–≤–∞—Ä—è üìö'
        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–æ —Ç–∞–∫:
        # 'command': 'button text'

    })


async def random(update, context):
    prompt = load_prompt("random")
    message = load_message("random")
    await send_image(update,context, "random")
    message = await send_text(update, context, message)
    answer = await chatgpt.send_question(prompt,"")
    await message.edit_text(answer)

async def gpt(update, context):
    dialog.mode = "gpt"
    prompt = load_prompt("gpt")
    message = load_message("gpt")
    chatgpt.set_prompt(prompt)
    await send_image(update, context, "gpt")
    await send_text(update, context, "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å *ChatGPT*.")


async def gpt_dialog(update, context):
    text = update.message.text
    message = await send_text(update, context, "–î—É–º–∞—é –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º...")
    answer = await chatgpt.add_message(text)
    await send_text(update, context, answer)

async def hello(update, context):
    if dialog.mode == "gpt":
        await gpt_dialog(update, context)
    elif dialog.mode == "talk":
        await talk_dialog(update, context)
    elif dialog.mode == "quiz":
        await quiz_dialog(update, context)
    elif dialog.mode == "translator":
        await translator_dialog(update, context)
    elif dialog.mode == "vocabulary":
        await vocabulary_trainer_dialog(update, context)
    else:
        await start(update, context)


async def talk(update, context):
    dialog.mode = "talk"
    text = load_message("talk")
    await send_image(update, context, "talk")
    await send_text_buttons(update, context, text, {
        "talk_cobain": "–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω",
        "talk_hawking": "–°—Ç–∏–≤–µ–Ω –•–æ–∫–∏–Ω–≥",
        "talk_nietzsche": "–§—Ä–∏–¥—Ä–∏—Ö –ù–∏—Ü—à–µ",
        "talk_queen": "–ö–æ—Ä–æ–ª–µ–≤–∞ –ï–ª–∏–∑–∞–≤–µ—Ç–∞ II",
        "talk_tolkien": "–î–∂–æ–Ω –¢–æ–ª–∫–∏–µ–Ω"
    })

async def talk_dialog(update, context):
    text = update.message.text
    my_message = await send_text(update, context, "–ù–∞–±–∏—Ä–∞—é —Ç–µ–∫—Å—Ç...")
    answer = await chatgpt.add_message(text)
    await my_message.edit_text(answer)

async def talk_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    await send_image(update, context, query)
    text = load_prompt(query)
    await send_text(update, context, text)

    prompt = load_prompt(query)
    chatgpt.set_prompt(prompt)


async def quiz(update, context):
    dialog.mode = "quiz"
    text = load_message("quiz")
    await send_image(update, context, "quiz")
    await send_text_buttons(update, context, text, {
        "quiz_prog": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "quiz_math": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
        "quiz_biology": "–ë–∏–æ–ª–æ–≥–∏—è"
    })

async def quiz_dialog(update, context):
    text = update.message.text
    my_message = await send_text(update, context, "–ü—Ä–æ–≤–µ—Ä—è—é –æ—Ç–≤–µ—Ç...")
    answer = await chatgpt.add_message(text)
    await my_message.edit_text(answer)

async def quiz_button(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    if query == "quiz_more":
        prompt = context.user_data['quiz_prompt']
    else:
        prompt = load_prompt(query)
        context.user_data['quiz_prompt'] = prompt

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
    question = await chatgpt.send_question(prompt, "")
    await send_text(update, context, question)

    # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['quiz_question'] = question


async def quiz_answer(update, context):
    user_answer = update.message.text
    question = context.user_data['quiz_question']
    prompt = context.user_data['quiz_prompt']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    result = await chatgpt.send_question(prompt, user_answer)
    await send_text(update, context, result)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
    if "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!" in result:
        context.user_data['quiz_score'] = context.user_data.get('quiz_score', 0) + 1

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—á–µ—Ç–∞
    score_message = f"–°—á–µ—Ç: {context.user_data.get('quiz_score', 0)}"
    await send_text(update, context, score_message)

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å
    await send_text_buttons(update, context, "–•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å?", {
        "quiz_more": "–ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å"
    })

async def translator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'translator'
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:"
    await send_text_buttons(update, context, text, {
        "translator_en": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
        "translator_es": "–ò—Å–ø–∞–Ω—Å–∫–∏–π",
        "translator_fr": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
        "translator_de": "–ù–µ–º–µ—Ü–∫–∏–π",
        "translator_ru": "–†—É—Å—Å–∫–∏–π"
    })

async def translator_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query.data
    await update.callback_query.answer()

    selected_language = query.split('_')[-1]
    context.user_data['selected_language'] = selected_language

    await update.callback_query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {selected_language}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")

async def translator_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'selected_language' in context.user_data:
        text_to_translate = update.message.text
        selected_language = context.user_data['selected_language']

        prompt = f"Translate the following text to {selected_language}: {text_to_translate}"
        message = await send_text(update, context, "–ü–µ—Ä–µ–≤–æ–∂—É —Ç–µ–∫—Å—Ç...")
        answer = await chatgpt.send_question(prompt, "")
        await message.edit_text(f"–ü–µ—Ä–µ–≤–æ–¥: {answer}")
    else:
        await send_text(update, context, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥–æ–π /translator.")

async def vocabulary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'vocabulary'
    text = "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è..."
    await send_text(update, context, text)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ChatGPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏
    prompt = "Generate a new word in English with its translation in Russian and examples of usage in sentences."
    answer = await chatgpt.send_question(prompt, "")

    await send_text(update, context, answer)



dialog = Dialog()
dialog.mode = None
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã dialog

chatgpt = ChatGptService("gpt:AEsXreIXcwEiqqkD3eqScgeFrtd_ekSvJdr_NdzFBAo8OOjyKzxVnawoToLoocydzuE9DANycYJFkblB3Tx4YlskdQhQ_4BrXR3QJe51XzgOOMFi0WErBAGuStCjy4Sq51AcQ3AnJI__P9LZvmzxEsF_oSgh")
app = ApplicationBuilder().token(
    "7440331197:AAF5Mqwot5kQRxlZ3cdz1B7Cffv84eeuf2Y").build()

app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler("gpt", gpt))
app.add_handler(CommandHandler("random", random))
app.add_handler(CommandHandler("talk", talk))
app.add_handler(CommandHandler("quiz", quiz))
app.add_handler(CommandHandler('translator', translator))
app.add_handler(CommandHandler("vocabulary", vocabulary))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))
# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CommandHandler('command', handler_func))

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CallbackQueryHandler(app_button, pattern='^app_.*'))
app.add_handler(CallbackQueryHandler(quiz_button, pattern="^quiz_.*"))
app.add_handler(CallbackQueryHandler(talk_button, pattern="^talk_.*"))
app.add_handler(CallbackQueryHandler(translator_button, pattern="^translator_.*"))
app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
